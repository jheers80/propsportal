-- =====================================================
-- PR Ops Portal - Production Database Setup
-- =====================================================
-- This file contains all necessary SQL for production deployment
-- Run this in your Supabase SQL editor to set up the complete database
-- =====================================================

-- =====================================================
-- 1. CREATE TABLES
-- =====================================================

-- User roles table
CREATE TABLE IF NOT EXISTS user_roles (
  id serial PRIMARY KEY,
  name text UNIQUE NOT NULL,
  display_name text NOT NULL,
  description text
);

-- Permissions table
CREATE TABLE IF NOT EXISTS permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text UNIQUE NOT NULL,
  description text
);

-- Role permissions junction table
CREATE TABLE IF NOT EXISTS role_permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role INTEGER NOT NULL REFERENCES user_roles(id) ON DELETE CASCADE,
  permission_id BIGINT NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
  UNIQUE (role, permission_id)
);

-- Profiles table
CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  role INTEGER REFERENCES user_roles(id),
  full_name TEXT,
  email TEXT,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Locations table
CREATE TABLE IF NOT EXISTS locations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  store_id TEXT UNIQUE NOT NULL,
  store_name TEXT NOT NULL,
  address TEXT,
  city TEXT,
  state TEXT,
  zip TEXT,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- User locations junction table
CREATE TABLE IF NOT EXISTS user_locations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  location_id BIGINT NOT NULL REFERENCES locations(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  UNIQUE (user_id, location_id)
);

-- Passphrases table
CREATE TABLE IF NOT EXISTS passphrases (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  location_id BIGINT NOT NULL REFERENCES locations(id) ON DELETE CASCADE,
  passphrase TEXT NOT NULL,
  created_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  expires_at TIMESTAMPTZ,
  is_active BOOLEAN DEFAULT true,
  UNIQUE (location_id)
);

-- Features table
CREATE TABLE IF NOT EXISTS features (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  display_name TEXT NOT NULL,
  description TEXT,
  link TEXT,
  icon TEXT,
  roles TEXT[] DEFAULT ARRAY['staff', 'manager', 'multiunit', 'superadmin'],
  new_tab BOOLEAN DEFAULT false,
  is_enabled BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Quick access sessions table
CREATE TABLE IF NOT EXISTS quick_access_sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  location_id BIGINT NOT NULL REFERENCES locations(id) ON DELETE CASCADE,
  passphrase_hash TEXT NOT NULL,
  expires_at TIMESTAMPTZ NOT NULL,
  role TEXT DEFAULT 'quickaccess',
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Audit trails table
CREATE TABLE IF NOT EXISTS audit_trails (
  id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  user_email TEXT,
  user_role TEXT,
  action TEXT NOT NULL,
  resource_type TEXT NOT NULL,
  resource_id TEXT,
  details JSONB,
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- 2. CREATE FUNCTIONS
-- =====================================================

-- Function to get current user's role
CREATE OR REPLACE FUNCTION get_my_role()
RETURNS TEXT AS $$
DECLARE
  user_role_name TEXT;
BEGIN
  SELECT ur.name INTO user_role_name
  FROM public.profiles p
  JOIN public.user_roles ur ON p.role = ur.id
  WHERE p.id = auth.uid();

  RETURN COALESCE(user_role_name, 'staff');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, role)
  VALUES (
    new.id,
    (SELECT id FROM user_roles WHERE name = 'staff')
  );
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function for quick login
CREATE OR REPLACE FUNCTION public.quick_login_start_session(p_passphrase TEXT, p_role TEXT DEFAULT 'quickaccess')
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_location_id BIGINT;
  v_session_id BIGINT;
BEGIN
  SELECT location_id INTO v_location_id
  FROM public.passphrases
  WHERE passphrase = p_passphrase
  LIMIT 1;

  IF v_location_id IS NULL THEN
    RETURN jsonb_build_object('success', false, 'error', 'Invalid passphrase');
  END IF;

  INSERT INTO public.quick_access_sessions (location_id, passphrase_hash, expires_at, role)
  VALUES (
    v_location_id,
    encode(digest(convert_to(p_passphrase::text, 'UTF8'), 'sha256'), 'hex'),
    now() + interval '1 hour',
    p_role
  )
  RETURNING id INTO v_session_id;

  RETURN jsonb_build_object('success', true, 'location_id', v_location_id, 'session_id', v_session_id);
END;
$$;

-- =====================================================
-- 3. CREATE TRIGGERS
-- =====================================================

-- Trigger for new user creation
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- =====================================================
-- 4. ENABLE ROW LEVEL SECURITY
-- =====================================================

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.locations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_locations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.passphrases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.features ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.audit_trails ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quick_access_sessions ENABLE ROW LEVEL SECURITY;

-- =====================================================
-- 5. CREATE RLS POLICIES
-- =====================================================

-- Profiles policies
DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
CREATE POLICY "Users can view their own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

DROP POLICY IF EXISTS "Admins can view all profiles" ON public.profiles;
CREATE POLICY "Admins can view all profiles" ON public.profiles
  FOR SELECT USING (get_my_role() IN ('superadmin', 'manager'));

DROP POLICY IF EXISTS "Admins can update profiles" ON public.profiles;
CREATE POLICY "Admins can update profiles" ON public.profiles
  FOR UPDATE USING (get_my_role() IN ('superadmin', 'manager'));

-- Role permissions policies
DROP POLICY IF EXISTS "Authenticated users can view role permissions" ON public.role_permissions;
CREATE POLICY "Authenticated users can view role permissions" ON public.role_permissions
  FOR SELECT TO authenticated USING (true);

DROP POLICY IF EXISTS "Superadmins can manage role permissions" ON public.role_permissions;
CREATE POLICY "Superadmins can manage role permissions" ON public.role_permissions
  FOR ALL USING (get_my_role() = 'superadmin');

-- Permissions policies
DROP POLICY IF EXISTS "Authenticated users can view permissions" ON public.permissions;
CREATE POLICY "Authenticated users can view permissions" ON public.permissions
  FOR SELECT TO authenticated USING (true);

DROP POLICY IF EXISTS "Superadmins can manage permissions" ON public.permissions;
CREATE POLICY "Superadmins can manage permissions" ON public.permissions
  FOR ALL USING (get_my_role() = 'superadmin');

-- Locations policies
DROP POLICY IF EXISTS "Authenticated users can view all locations" ON public.locations;
CREATE POLICY "Authenticated users can view all locations" ON public.locations
  FOR SELECT TO authenticated USING (true);

DROP POLICY IF EXISTS "Admins can manage locations" ON public.locations;
CREATE POLICY "Admins can manage locations" ON public.locations
  FOR ALL USING (get_my_role() = 'superadmin');

-- User locations policies
DROP POLICY IF EXISTS "Users can view their own location assignments" ON public.user_locations;
CREATE POLICY "Users can view their own location assignments" ON public.user_locations
  FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Admins can manage user location assignments" ON public.user_locations;
CREATE POLICY "Admins can manage user location assignments" ON public.user_locations
  FOR ALL USING (get_my_role() = 'superadmin');

-- Passphrases policies
DROP POLICY IF EXISTS "Users can view passphrases for their assigned locations" ON public.passphrases;
CREATE POLICY "Users can view passphrases for their assigned locations" ON public.passphrases
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM user_locations ul
      WHERE ul.user_id = auth.uid() AND ul.location_id = passphrases.location_id
    )
  );

DROP POLICY IF EXISTS "Admins can manage passphrases" ON public.passphrases;
CREATE POLICY "Admins can manage passphrases" ON public.passphrases
  FOR ALL USING (get_my_role() IN ('superadmin', 'manager'));

-- Features policies
DROP POLICY IF EXISTS superadmin_write ON features;
CREATE POLICY superadmin_write ON features
  FOR ALL
  USING (get_my_role() = 'superadmin')
  WITH CHECK (get_my_role() = 'superadmin');

DROP POLICY IF EXISTS portal_user_read ON features;
CREATE POLICY portal_user_read ON features
  FOR SELECT
  USING (get_my_role() = ANY(features.roles));

-- Audit trails policies
DROP POLICY IF EXISTS superadmin_audit_access ON audit_trails;
CREATE POLICY superadmin_audit_access ON audit_trails
  FOR ALL
  USING (get_my_role() = 'superadmin');

-- Quick access sessions policies
DROP POLICY IF EXISTS "Users can view their own sessions" ON public.quick_access_sessions;
CREATE POLICY "Users can view their own sessions" ON public.quick_access_sessions
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM user_locations ul
      WHERE ul.user_id = auth.uid() AND ul.location_id = quick_access_sessions.location_id
    )
  );

-- =====================================================
-- 6. CREATE INDEXES
-- =====================================================

CREATE INDEX IF NOT EXISTS idx_profiles_role ON profiles(role);
CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions(role);
CREATE INDEX IF NOT EXISTS idx_role_permissions_permission ON role_permissions(permission_id);
CREATE INDEX IF NOT EXISTS idx_user_locations_user ON user_locations(user_id);
CREATE INDEX IF NOT EXISTS idx_user_locations_location ON user_locations(location_id);
CREATE INDEX IF NOT EXISTS idx_passphrases_location ON passphrases(location_id);
CREATE INDEX IF NOT EXISTS idx_passphrases_active ON passphrases(is_active) WHERE is_active = true;
CREATE INDEX IF NOT EXISTS idx_quick_access_sessions_location ON quick_access_sessions(location_id);
CREATE INDEX IF NOT EXISTS idx_quick_access_sessions_expires ON quick_access_sessions(expires_at);
CREATE INDEX IF NOT EXISTS idx_audit_trails_user_id ON audit_trails(user_id);
CREATE INDEX IF NOT EXISTS idx_audit_trails_action ON audit_trails(action);
CREATE INDEX IF NOT EXISTS idx_audit_trails_resource_type ON audit_trails(resource_type);
CREATE INDEX IF NOT EXISTS idx_audit_trails_created_at ON audit_trails(created_at DESC);

-- =====================================================
-- 7. INSERT INITIAL DATA
-- =====================================================

-- Insert user roles
INSERT INTO user_roles (name, display_name, description) VALUES
  ('superadmin', 'Super Admin', 'Full access to all admin features and settings'),
  ('multiunit', 'Multi-Unit Manager', 'Manages multiple business units or locations'),
  ('manager', 'Manager', 'Manages a single location or team'),
  ('staff', 'Staff', 'Standard staff member with limited access'),
  ('quickaccess', 'Quick Access', 'Temporary or quick access user for limited actions')
ON CONFLICT (name) DO NOTHING;

-- Insert permissions
INSERT INTO permissions (name, description) VALUES
  ('audit.view', 'View audit trails and system logs'),
  ('users.view', 'View user management'),
  ('users.create', 'Create new users'),
  ('users.update', 'Update user information'),
  ('users.delete', 'Delete users'),
  ('features.view', 'View feature management'),
  ('features.create', 'Create new features'),
  ('features.update', 'Update feature settings'),
  ('features.delete', 'Delete features'),
  ('locations.view', 'View location management'),
  ('locations.create', 'Create new locations'),
  ('locations.update', 'Update location information'),
  ('locations.delete', 'Delete locations'),
  ('passphrases.view', 'View passphrase management'),
  ('passphrases.create', 'Generate new passphrases'),
  ('passphrases.update', 'Update passphrase settings'),
  ('passphrases.delete', 'Delete passphrases')
ON CONFLICT (name) DO NOTHING;

-- Insert default features
INSERT INTO features (name, display_name, description, link, icon, roles, new_tab) VALUES
  ('dashboard', 'Dashboard', 'Main dashboard with overview', '/dashboard', 'dashboard', ARRAY['staff', 'manager', 'multiunit', 'superadmin'], false),
  ('profile', 'Profile Management', 'User profile management', '/profile', 'person', ARRAY['staff', 'manager', 'multiunit', 'superadmin'], false),
  ('admin', 'Admin Panel', 'Administrative functions', '/admin', 'admin_panel_settings', ARRAY['superadmin'], false),
  ('audit', 'Audit Trails', 'System audit logs', '/admin/audit-trails', 'history', ARRAY['superadmin'], false)
ON CONFLICT (name) DO NOTHING;

-- =====================================================
-- 8. ASSIGN ROLE PERMISSIONS
-- =====================================================

-- Clear existing role_permissions
TRUNCATE TABLE role_permissions;

-- Superadmin gets all permissions
INSERT INTO role_permissions (role, permission_id)
SELECT ur.id, p.id
FROM user_roles ur
CROSS JOIN permissions p
WHERE ur.name = 'superadmin';

-- Manager permissions
INSERT INTO role_permissions (role, permission_id)
SELECT ur.id, p.id
FROM user_roles ur
JOIN permissions p ON p.name IN ('users.view', 'locations.view', 'passphrases.view', 'passphrases.create')
WHERE ur.name = 'manager';

-- Multi-unit manager permissions
INSERT INTO role_permissions (role, permission_id)
SELECT ur.id, p.id
FROM user_roles ur
JOIN permissions p ON p.name IN ('users.view', 'locations.view', 'locations.create', 'locations.update', 'passphrases.view', 'passphrases.create')
WHERE ur.name = 'multiunit';

-- Staff permissions
INSERT INTO role_permissions (role, permission_id)
SELECT ur.id, p.id
FROM user_roles ur
JOIN permissions p ON p.name IN ('users.view', 'features.view')
WHERE ur.name = 'staff';

-- Quick access permissions
INSERT INTO role_permissions (role, permission_id)
SELECT ur.id, p.id
FROM user_roles ur
JOIN permissions p ON p.name IN ('features.view')
WHERE ur.name = 'quickaccess';

-- =====================================================
-- SETUP COMPLETE
-- =====================================================

-- Note: Default role is handled by application code and database triggers
-- The handle_new_user() function sets the default role to 'staff' for new users
